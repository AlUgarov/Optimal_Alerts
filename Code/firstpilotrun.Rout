
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #Analyze the optimal alerts experiment data (first attempt)
> remove(list = ls())
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(tidyr)
> library(ggplot2)
> library(ggpubr)
> 
> 
> 
> tempdir()
[1] "C:\\Users\\aluga\\AppData\\Local\\Temp\\RtmpqK9gcz"
> dir.create(tempdir())
Warning message:
In dir.create(tempdir()) :
  'C:\Users\aluga\AppData\Local\Temp\RtmpqK9gcz' already exists
> 
> 
> #Put your own data folder here:
> setwd("C:/Tornado_warnings/Experiment/Alerts_Experiment")
> 
> 
> #Importing the results:
> fulldat<-read.csv(file = 'Input/Data_FirstPilot.csv')
> 
> print(fulldat[1:5,1:10])
                                             StartDate
1                                           Start Date
2 {"ImportId":"startDate","timeZone":"America/Denver"}
3                                  2021-06-25 09:39:30
4                                  2021-06-25 09:47:51
5                                  2021-06-25 09:39:40
                                             EndDate                Status
1                                           End Date         Response Type
2 {"ImportId":"endDate","timeZone":"America/Denver"} {"ImportId":"status"}
3                                2021-06-25 10:25:56                     0
4                                2021-06-25 10:26:57                     0
5                                2021-06-25 10:49:38                     0
                 IPAddress                Progress   Duration..in.seconds.
1               IP Address                Progress   Duration (in seconds)
2 {"ImportId":"ipAddress"} {"ImportId":"progress"} {"ImportId":"duration"}
3           130.184.253.31                     100                    2786
4           130.184.253.31                     100                    2346
5           130.184.253.31                     100                    4198
                 Finished
1                Finished
2 {"ImportId":"finished"}
3                       1
4                       1
5                       1
                                             RecordedDate
1                                           Recorded Date
2 {"ImportId":"recordedDate","timeZone":"America/Denver"}
3                                     2021-06-25 10:25:57
4                                     2021-06-25 10:26:58
5                                     2021-06-25 10:49:39
                ResponseId                RecipientLastName
1              Response ID              Recipient Last Name
2 {"ImportId":"_recordId"} {"ImportId":"recipientLastName"}
3        R_6kZJj2udcgzorJL                              Doe
4        R_3McG3bmtU34ZyKU                              Doe
5        R_23UzZL4eDCoEMog                              Doe
> print(names(fulldat))
  [1] "StartDate"             "EndDate"               "Status"               
  [4] "IPAddress"             "Progress"              "Duration..in.seconds."
  [7] "Finished"              "RecordedDate"          "ResponseId"           
 [10] "RecipientLastName"     "RecipientFirstName"    "RecipientEmail"       
 [13] "ExternalReference"     "LocationLatitude"      "LocationLongitude"    
 [16] "DistributionChannel"   "UserLanguage"          "Q57_First.Click"      
 [19] "Q57_Last.Click"        "Q57_Page.Submit"       "Q57_Click.Count"      
 [22] "Q58_First.Click"       "Q58_Last.Click"        "Q58_Page.Submit"      
 [25] "Q58_Click.Count"       "Q157"                  "Q158"                 
 [28] "X1_B1"                 "X1_Q59_First.Click"    "X1_Q59_Last.Click"    
 [31] "X1_Q59_Page.Submit"    "X1_Q59_Click.Count"    "X2_B1"                
 [34] "X2_Q59_First.Click"    "X2_Q59_Last.Click"     "X2_Q59_Page.Submit"   
 [37] "X2_Q59_Click.Count"    "X3_B1"                 "X3_Q59_First.Click"   
 [40] "X3_Q59_Last.Click"     "X3_Q59_Page.Submit"    "X3_Q59_Click.Count"   
 [43] "X4_B1"                 "X4_Q59_First.Click"    "X4_Q59_Last.Click"    
 [46] "X4_Q59_Page.Submit"    "X4_Q59_Click.Count"    "X5_B1"                
 [49] "X5_Q59_First.Click"    "X5_Q59_Last.Click"     "X5_Q59_Page.Submit"   
 [52] "X5_Q59_Click.Count"    "Q172_First.Click"      "Q172_Last.Click"      
 [55] "Q172_Page.Submit"      "Q172_Click.Count"      "Q60_First.Click"      
 [58] "Q60_Last.Click"        "Q60_Page.Submit"       "Q60_Click.Count"      
 [61] "Q120"                  "Q119"                  "Q121"                 
 [64] "Q118"                  "Q117"                  "Q173_First.Click"     
 [67] "Q173_Last.Click"       "Q173_Page.Submit"      "Q173_Click.Count"     
 [70] "Q130"                  "Q135"                  "Q136"                 
 [73] "X1_IP_W"               "X1_IP_B"               "X1_Q61_First.Click"   
 [76] "X1_Q61_Last.Click"     "X1_Q61_Page.Submit"    "X1_Q61_Click.Count"   
 [79] "X2_IP_W"               "X2_IP_B"               "X2_Q61_First.Click"   
 [82] "X2_Q61_Last.Click"     "X2_Q61_Page.Submit"    "X2_Q61_Click.Count"   
 [85] "X3_IP_W"               "X3_IP_B"               "X3_Q61_First.Click"   
 [88] "X3_Q61_Last.Click"     "X3_Q61_Page.Submit"    "X3_Q61_Click.Count"   
 [91] "X4_IP_W"               "X4_IP_B"               "X4_Q61_First.Click"   
 [94] "X4_Q61_Last.Click"     "X4_Q61_Page.Submit"    "X4_Q61_Click.Count"   
 [97] "X5_IP_W"               "X5_IP_B"               "X5_Q61_First.Click"   
[100] "X5_Q61_Last.Click"     "X5_Q61_Page.Submit"    "X5_Q61_Click.Count"   
[103] "X6_IP_W"               "X6_IP_B"               "X6_Q61_First.Click"   
[106] "X6_Q61_Last.Click"     "X6_Q61_Page.Submit"    "X6_Q61_Click.Count"   
[109] "Q174_First.Click"      "Q174_Last.Click"       "Q174_Page.Submit"     
[112] "Q174_Click.Count"      "Q63_First.Click"       "Q63_Last.Click"       
[115] "Q63_Page.Submit"       "Q63_Click.Count"       "X1_BE1_W_15"          
[118] "X1_Q79_First.Click"    "X1_Q79_Last.Click"     "X1_Q79_Page.Submit"   
[121] "X1_Q79_Click.Count"    "X1_BE1_B_1"            "X1_Q64_First.Click"   
[124] "X1_Q64_Last.Click"     "X1_Q64_Page.Submit"    "X1_Q64_Click.Count"   
[127] "X2_BE1_W_15"           "X2_Q79_First.Click"    "X2_Q79_Last.Click"    
[130] "X2_Q79_Page.Submit"    "X2_Q79_Click.Count"    "X2_BE1_B_1"           
[133] "X2_Q64_First.Click"    "X2_Q64_Last.Click"     "X2_Q64_Page.Submit"   
[136] "X2_Q64_Click.Count"    "X3_BE1_W_15"           "X3_Q79_First.Click"   
[139] "X3_Q79_Last.Click"     "X3_Q79_Page.Submit"    "X3_Q79_Click.Count"   
[142] "X3_BE1_B_1"            "X3_Q64_First.Click"    "X3_Q64_Last.Click"    
[145] "X3_Q64_Page.Submit"    "X3_Q64_Click.Count"    "X4_BE1_W_15"          
[148] "X4_Q79_First.Click"    "X4_Q79_Last.Click"     "X4_Q79_Page.Submit"   
[151] "X4_Q79_Click.Count"    "X4_BE1_B_1"            "X4_Q64_First.Click"   
[154] "X4_Q64_Last.Click"     "X4_Q64_Page.Submit"    "X4_Q64_Click.Count"   
[157] "X5_BE1_W_15"           "X5_Q79_First.Click"    "X5_Q79_Last.Click"    
[160] "X5_Q79_Page.Submit"    "X5_Q79_Click.Count"    "X5_BE1_B_1"           
[163] "X5_Q64_First.Click"    "X5_Q64_Last.Click"     "X5_Q64_Page.Submit"   
[166] "X5_Q64_Click.Count"    "X6_BE1_W_15"           "X6_Q79_First.Click"   
[169] "X6_Q79_Last.Click"     "X6_Q79_Page.Submit"    "X6_Q79_Click.Count"   
[172] "X6_BE1_B_1"            "X6_Q64_First.Click"    "X6_Q64_Last.Click"    
[175] "X6_Q64_Page.Submit"    "X6_Q64_Click.Count"    "Q176_First.Click"     
[178] "Q176_Last.Click"       "Q176_Page.Submit"      "Q176_Click.Count"     
[181] "Q66_First.Click"       "Q66_Last.Click"        "Q66_Page.Submit"      
[184] "Q66_Click.Count"       "Q164"                  "Q166"                 
[187] "Q177_First.Click"      "Q177_Last.Click"       "Q177_Page.Submit"     
[190] "Q177_Click.Count"      "Q178_First.Click"      "Q178_Last.Click"      
[193] "Q178_Page.Submit"      "Q178_Click.Count"      "X1_WTP1_1_1"          
[196] "X1_WTP1_2_1"           "X1_WTP1_3_1"           "X1_WTP1_4_1"          
[199] "X1_WTP1_5_1"           "X1_WTP1_6_1"           "X1_WTP1_7_1"          
[202] "X1_WTP1_8_1"           "X1_WTP1_9_1"           "X1_WTP1_10_1"         
[205] "X1_WTP1_11_1"          "X1_Q185_First.Click"   "X1_Q185_Last.Click"   
[208] "X1_Q185_Page.Submit"   "X1_Q185_Click.Count"   "X2_WTP1_1_1"          
[211] "X2_WTP1_2_1"           "X2_WTP1_3_1"           "X2_WTP1_4_1"          
[214] "X2_WTP1_5_1"           "X2_WTP1_6_1"           "X2_WTP1_7_1"          
[217] "X2_WTP1_8_1"           "X2_WTP1_9_1"           "X2_WTP1_10_1"         
[220] "X2_WTP1_11_1"          "X2_Q185_First.Click"   "X2_Q185_Last.Click"   
[223] "X2_Q185_Page.Submit"   "X2_Q185_Click.Count"   "X3_WTP1_1_1"          
[226] "X3_WTP1_2_1"           "X3_WTP1_3_1"           "X3_WTP1_4_1"          
[229] "X3_WTP1_5_1"           "X3_WTP1_6_1"           "X3_WTP1_7_1"          
[232] "X3_WTP1_8_1"           "X3_WTP1_9_1"           "X3_WTP1_10_1"         
[235] "X3_WTP1_11_1"          "X3_Q185_First.Click"   "X3_Q185_Last.Click"   
[238] "X3_Q185_Page.Submit"   "X3_Q185_Click.Count"   "X4_WTP1_1_1"          
[241] "X4_WTP1_2_1"           "X4_WTP1_3_1"           "X4_WTP1_4_1"          
[244] "X4_WTP1_5_1"           "X4_WTP1_6_1"           "X4_WTP1_7_1"          
[247] "X4_WTP1_8_1"           "X4_WTP1_9_1"           "X4_WTP1_10_1"         
[250] "X4_WTP1_11_1"          "X4_Q185_First.Click"   "X4_Q185_Last.Click"   
[253] "X4_Q185_Page.Submit"   "X4_Q185_Click.Count"   "X5_WTP1_1_1"          
[256] "X5_WTP1_2_1"           "X5_WTP1_3_1"           "X5_WTP1_4_1"          
[259] "X5_WTP1_5_1"           "X5_WTP1_6_1"           "X5_WTP1_7_1"          
[262] "X5_WTP1_8_1"           "X5_WTP1_9_1"           "X5_WTP1_10_1"         
[265] "X5_WTP1_11_1"          "X5_Q185_First.Click"   "X5_Q185_Last.Click"   
[268] "X5_Q185_Page.Submit"   "X5_Q185_Click.Count"   "X6_WTP1_1_1"          
[271] "X6_WTP1_2_1"           "X6_WTP1_3_1"           "X6_WTP1_4_1"          
[274] "X6_WTP1_5_1"           "X6_WTP1_6_1"           "X6_WTP1_7_1"          
[277] "X6_WTP1_8_1"           "X6_WTP1_9_1"           "X6_WTP1_10_1"         
[280] "X6_WTP1_11_1"          "X6_Q185_First.Click"   "X6_Q185_Last.Click"   
[283] "X6_Q185_Page.Submit"   "X6_Q185_Click.Count"   "A_B"                  
[286] "Q179_First.Click"      "Q179_Last.Click"       "Q179_Page.Submit"     
[289] "Q179_Click.Count"      "Q180_First.Click"      "Q180_Last.Click"      
[292] "Q180_Page.Submit"      "Q180_Click.Count"      "A_IP"                 
[295] "Q181_First.Click"      "Q181_Last.Click"       "Q181_Page.Submit"     
[298] "Q181_Click.Count"      "Q107_1"                "Q107_2"               
[301] "Q107_3"                "Q107_4"                "Q112_1"               
[304] "Q112_2"                "Q112_3"                "Q112_4"               
[307] "Q113_1"                "Q113_2"                "Q113_3"               
[310] "Q113_4"                "Q104"                  "Q105"                 
[313] "Q106"                  "Q114"                  "Q115"                 
[316] "Q6"                    "Q8_1"                  "Q10"                  
[319] "Q137"                  "Endowment"             "ProtectionCost"       
[322] "Loss"                  "seltask"               "Round"                
[325] "History"               "Payoffs"               "Task"                 
[328] "Signal1"               "Signal2"               "IP_Wc"                
[331] "IP_Bc"                 "bl_q1"                 "bl_q2"                
[334] "Treatment_Plans"       "SelSignalStruc"        "SelBoxPic"            
[337] "SelSignalPic"          "selprob"               "Sequence"             
[340] "Final_Payoff"          "Participant_ID"        "T1R1"                 
> fulldat<-fulldat[-c(1,2),] #remove first two rows with metadata
> print(fulldat[1:5,1:10])
            StartDate             EndDate Status      IPAddress Progress
3 2021-06-25 09:39:30 2021-06-25 10:25:56      0 130.184.253.31      100
4 2021-06-25 09:47:51 2021-06-25 10:26:57      0 130.184.253.31      100
5 2021-06-25 09:39:40 2021-06-25 10:49:38      0 130.184.253.31      100
6 2021-06-25 09:39:07 2021-06-25 10:52:19      0 130.184.253.31      100
7 2021-06-28 09:47:53 2021-06-28 09:55:19      0 130.184.253.31      100
  Duration..in.seconds. Finished        RecordedDate        ResponseId
3                  2786        1 2021-06-25 10:25:57 R_6kZJj2udcgzorJL
4                  2346        1 2021-06-25 10:26:58 R_3McG3bmtU34ZyKU
5                  4198        1 2021-06-25 10:49:39 R_23UzZL4eDCoEMog
6                  4391        1 2021-06-25 10:52:20 R_pcjE3VRmij9PjJD
7                   446        1 2021-06-28 09:55:20 R_ZC2QZsrVGyrADex
  RecipientLastName
3               Doe
4               Doe
5               Doe
6               Doe
7                  
> 
> nrounds=6
> 
> 
> names(fulldat)[names(fulldat) == "Sequence"] <- "sequence"
> 
> textvars<-c("StartDate","EndDate","ExternalReference","Q104","Q105","Q106","Q114","Q115")
> allvars<-names(fulldat)
> numvars<-allvars[!(allvars %in% textvars)]
> print(textvars)
[1] "StartDate"         "EndDate"           "ExternalReference"
[4] "Q104"              "Q105"              "Q106"             
[7] "Q114"              "Q115"             
> print(numvars)
  [1] "Status"                "IPAddress"             "Progress"             
  [4] "Duration..in.seconds." "Finished"              "RecordedDate"         
  [7] "ResponseId"            "RecipientLastName"     "RecipientFirstName"   
 [10] "RecipientEmail"        "LocationLatitude"      "LocationLongitude"    
 [13] "DistributionChannel"   "UserLanguage"          "Q57_First.Click"      
 [16] "Q57_Last.Click"        "Q57_Page.Submit"       "Q57_Click.Count"      
 [19] "Q58_First.Click"       "Q58_Last.Click"        "Q58_Page.Submit"      
 [22] "Q58_Click.Count"       "Q157"                  "Q158"                 
 [25] "X1_B1"                 "X1_Q59_First.Click"    "X1_Q59_Last.Click"    
 [28] "X1_Q59_Page.Submit"    "X1_Q59_Click.Count"    "X2_B1"                
 [31] "X2_Q59_First.Click"    "X2_Q59_Last.Click"     "X2_Q59_Page.Submit"   
 [34] "X2_Q59_Click.Count"    "X3_B1"                 "X3_Q59_First.Click"   
 [37] "X3_Q59_Last.Click"     "X3_Q59_Page.Submit"    "X3_Q59_Click.Count"   
 [40] "X4_B1"                 "X4_Q59_First.Click"    "X4_Q59_Last.Click"    
 [43] "X4_Q59_Page.Submit"    "X4_Q59_Click.Count"    "X5_B1"                
 [46] "X5_Q59_First.Click"    "X5_Q59_Last.Click"     "X5_Q59_Page.Submit"   
 [49] "X5_Q59_Click.Count"    "Q172_First.Click"      "Q172_Last.Click"      
 [52] "Q172_Page.Submit"      "Q172_Click.Count"      "Q60_First.Click"      
 [55] "Q60_Last.Click"        "Q60_Page.Submit"       "Q60_Click.Count"      
 [58] "Q120"                  "Q119"                  "Q121"                 
 [61] "Q118"                  "Q117"                  "Q173_First.Click"     
 [64] "Q173_Last.Click"       "Q173_Page.Submit"      "Q173_Click.Count"     
 [67] "Q130"                  "Q135"                  "Q136"                 
 [70] "X1_IP_W"               "X1_IP_B"               "X1_Q61_First.Click"   
 [73] "X1_Q61_Last.Click"     "X1_Q61_Page.Submit"    "X1_Q61_Click.Count"   
 [76] "X2_IP_W"               "X2_IP_B"               "X2_Q61_First.Click"   
 [79] "X2_Q61_Last.Click"     "X2_Q61_Page.Submit"    "X2_Q61_Click.Count"   
 [82] "X3_IP_W"               "X3_IP_B"               "X3_Q61_First.Click"   
 [85] "X3_Q61_Last.Click"     "X3_Q61_Page.Submit"    "X3_Q61_Click.Count"   
 [88] "X4_IP_W"               "X4_IP_B"               "X4_Q61_First.Click"   
 [91] "X4_Q61_Last.Click"     "X4_Q61_Page.Submit"    "X4_Q61_Click.Count"   
 [94] "X5_IP_W"               "X5_IP_B"               "X5_Q61_First.Click"   
 [97] "X5_Q61_Last.Click"     "X5_Q61_Page.Submit"    "X5_Q61_Click.Count"   
[100] "X6_IP_W"               "X6_IP_B"               "X6_Q61_First.Click"   
[103] "X6_Q61_Last.Click"     "X6_Q61_Page.Submit"    "X6_Q61_Click.Count"   
[106] "Q174_First.Click"      "Q174_Last.Click"       "Q174_Page.Submit"     
[109] "Q174_Click.Count"      "Q63_First.Click"       "Q63_Last.Click"       
[112] "Q63_Page.Submit"       "Q63_Click.Count"       "X1_BE1_W_15"          
[115] "X1_Q79_First.Click"    "X1_Q79_Last.Click"     "X1_Q79_Page.Submit"   
[118] "X1_Q79_Click.Count"    "X1_BE1_B_1"            "X1_Q64_First.Click"   
[121] "X1_Q64_Last.Click"     "X1_Q64_Page.Submit"    "X1_Q64_Click.Count"   
[124] "X2_BE1_W_15"           "X2_Q79_First.Click"    "X2_Q79_Last.Click"    
[127] "X2_Q79_Page.Submit"    "X2_Q79_Click.Count"    "X2_BE1_B_1"           
[130] "X2_Q64_First.Click"    "X2_Q64_Last.Click"     "X2_Q64_Page.Submit"   
[133] "X2_Q64_Click.Count"    "X3_BE1_W_15"           "X3_Q79_First.Click"   
[136] "X3_Q79_Last.Click"     "X3_Q79_Page.Submit"    "X3_Q79_Click.Count"   
[139] "X3_BE1_B_1"            "X3_Q64_First.Click"    "X3_Q64_Last.Click"    
[142] "X3_Q64_Page.Submit"    "X3_Q64_Click.Count"    "X4_BE1_W_15"          
[145] "X4_Q79_First.Click"    "X4_Q79_Last.Click"     "X4_Q79_Page.Submit"   
[148] "X4_Q79_Click.Count"    "X4_BE1_B_1"            "X4_Q64_First.Click"   
[151] "X4_Q64_Last.Click"     "X4_Q64_Page.Submit"    "X4_Q64_Click.Count"   
[154] "X5_BE1_W_15"           "X5_Q79_First.Click"    "X5_Q79_Last.Click"    
[157] "X5_Q79_Page.Submit"    "X5_Q79_Click.Count"    "X5_BE1_B_1"           
[160] "X5_Q64_First.Click"    "X5_Q64_Last.Click"     "X5_Q64_Page.Submit"   
[163] "X5_Q64_Click.Count"    "X6_BE1_W_15"           "X6_Q79_First.Click"   
[166] "X6_Q79_Last.Click"     "X6_Q79_Page.Submit"    "X6_Q79_Click.Count"   
[169] "X6_BE1_B_1"            "X6_Q64_First.Click"    "X6_Q64_Last.Click"    
[172] "X6_Q64_Page.Submit"    "X6_Q64_Click.Count"    "Q176_First.Click"     
[175] "Q176_Last.Click"       "Q176_Page.Submit"      "Q176_Click.Count"     
[178] "Q66_First.Click"       "Q66_Last.Click"        "Q66_Page.Submit"      
[181] "Q66_Click.Count"       "Q164"                  "Q166"                 
[184] "Q177_First.Click"      "Q177_Last.Click"       "Q177_Page.Submit"     
[187] "Q177_Click.Count"      "Q178_First.Click"      "Q178_Last.Click"      
[190] "Q178_Page.Submit"      "Q178_Click.Count"      "X1_WTP1_1_1"          
[193] "X1_WTP1_2_1"           "X1_WTP1_3_1"           "X1_WTP1_4_1"          
[196] "X1_WTP1_5_1"           "X1_WTP1_6_1"           "X1_WTP1_7_1"          
[199] "X1_WTP1_8_1"           "X1_WTP1_9_1"           "X1_WTP1_10_1"         
[202] "X1_WTP1_11_1"          "X1_Q185_First.Click"   "X1_Q185_Last.Click"   
[205] "X1_Q185_Page.Submit"   "X1_Q185_Click.Count"   "X2_WTP1_1_1"          
[208] "X2_WTP1_2_1"           "X2_WTP1_3_1"           "X2_WTP1_4_1"          
[211] "X2_WTP1_5_1"           "X2_WTP1_6_1"           "X2_WTP1_7_1"          
[214] "X2_WTP1_8_1"           "X2_WTP1_9_1"           "X2_WTP1_10_1"         
[217] "X2_WTP1_11_1"          "X2_Q185_First.Click"   "X2_Q185_Last.Click"   
[220] "X2_Q185_Page.Submit"   "X2_Q185_Click.Count"   "X3_WTP1_1_1"          
[223] "X3_WTP1_2_1"           "X3_WTP1_3_1"           "X3_WTP1_4_1"          
[226] "X3_WTP1_5_1"           "X3_WTP1_6_1"           "X3_WTP1_7_1"          
[229] "X3_WTP1_8_1"           "X3_WTP1_9_1"           "X3_WTP1_10_1"         
[232] "X3_WTP1_11_1"          "X3_Q185_First.Click"   "X3_Q185_Last.Click"   
[235] "X3_Q185_Page.Submit"   "X3_Q185_Click.Count"   "X4_WTP1_1_1"          
[238] "X4_WTP1_2_1"           "X4_WTP1_3_1"           "X4_WTP1_4_1"          
[241] "X4_WTP1_5_1"           "X4_WTP1_6_1"           "X4_WTP1_7_1"          
[244] "X4_WTP1_8_1"           "X4_WTP1_9_1"           "X4_WTP1_10_1"         
[247] "X4_WTP1_11_1"          "X4_Q185_First.Click"   "X4_Q185_Last.Click"   
[250] "X4_Q185_Page.Submit"   "X4_Q185_Click.Count"   "X5_WTP1_1_1"          
[253] "X5_WTP1_2_1"           "X5_WTP1_3_1"           "X5_WTP1_4_1"          
[256] "X5_WTP1_5_1"           "X5_WTP1_6_1"           "X5_WTP1_7_1"          
[259] "X5_WTP1_8_1"           "X5_WTP1_9_1"           "X5_WTP1_10_1"         
[262] "X5_WTP1_11_1"          "X5_Q185_First.Click"   "X5_Q185_Last.Click"   
[265] "X5_Q185_Page.Submit"   "X5_Q185_Click.Count"   "X6_WTP1_1_1"          
[268] "X6_WTP1_2_1"           "X6_WTP1_3_1"           "X6_WTP1_4_1"          
[271] "X6_WTP1_5_1"           "X6_WTP1_6_1"           "X6_WTP1_7_1"          
[274] "X6_WTP1_8_1"           "X6_WTP1_9_1"           "X6_WTP1_10_1"         
[277] "X6_WTP1_11_1"          "X6_Q185_First.Click"   "X6_Q185_Last.Click"   
[280] "X6_Q185_Page.Submit"   "X6_Q185_Click.Count"   "A_B"                  
[283] "Q179_First.Click"      "Q179_Last.Click"       "Q179_Page.Submit"     
[286] "Q179_Click.Count"      "Q180_First.Click"      "Q180_Last.Click"      
[289] "Q180_Page.Submit"      "Q180_Click.Count"      "A_IP"                 
[292] "Q181_First.Click"      "Q181_Last.Click"       "Q181_Page.Submit"     
[295] "Q181_Click.Count"      "Q107_1"                "Q107_2"               
[298] "Q107_3"                "Q107_4"                "Q112_1"               
[301] "Q112_2"                "Q112_3"                "Q112_4"               
[304] "Q113_1"                "Q113_2"                "Q113_3"               
[307] "Q113_4"                "Q6"                    "Q8_1"                 
[310] "Q10"                   "Q137"                  "Endowment"            
[313] "ProtectionCost"        "Loss"                  "seltask"              
[316] "Round"                 "History"               "Payoffs"              
[319] "Task"                  "Signal1"               "Signal2"              
[322] "IP_Wc"                 "IP_Bc"                 "bl_q1"                
[325] "bl_q2"                 "Treatment_Plans"       "SelSignalStruc"       
[328] "SelBoxPic"             "SelSignalPic"          "selprob"              
[331] "sequence"              "Final_Payoff"          "Participant_ID"       
[334] "T1R1"                 
> fulldat[,numvars]<-lapply(fulldat[,numvars] , as.numeric)
There were 14 warnings (use warnings() to see them)
> 
> 
> fulldat<-filter(fulldat,!is.na(sequence))
> dim(fulldat)
[1]  19 342
> 
> saveRDS(fulldat,file="Temp/firstpilot.Rdata")
> 
> #identify correct quiz answers
> fulldat$blind_correct<-(fulldat$Q157==2)+(fulldat$Q158==3)
> fulldat$informed_correct<-(fulldat$Q120==2)+(fulldat$Q119==2)+(fulldat$Q121==1)+(fulldat$Q118==3)+(fulldat$Q117==4)
> table(fulldat$informed_correct)

 2  3  4  5 
 1  1  6 11 
> fulldat$wtp_correct<-(fulldat$Q164==3)+(fulldat$Q166==3)
> table(fulldat$wtp_correct)

0 1 2 
4 9 6 
> fulldat$Ncorrect<-fulldat$blind_correct+fulldat$informed_correct+fulldat$wtp_correct
> table(fulldat$Ncorrect)

3 5 6 7 8 9 
1 1 6 5 4 2 
> 
> 
> #Understanding of the instructions:
> COMPRplot<-fulldat %>% select(Ncorrect) %>% filter(complete.cases(.)) %>%
+   ggplot(aes(Ncorrect))+
+   geom_bar()+
+   scale_fill_manual(values = c("navy"))+
+   #coord_flip()+
+   labs(x="Correct answers", y="N respondents", title = "N of correct quiz responses")+
+   #scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   #theme(text = element_text(size=15), plot.title = element_text(size=15), legend.position = "none")+
+   scale_x_discrete(limits=c(0,1,2,3,4,5,6,7,8,9))
Warning message:
Continuous limits supplied to discrete scale.
Did you mean `limits = factor(...)` or `scale_*_continuous()`? 
> print(COMPRplot)
> ggsave("Graphs/COMPRplot.pdf")
Saving 7 x 7 in image
> 
> #Self-reported understanding:
> und_vars<-c("Q107_1","Q107_2","Q107_3","Q107_4")
> task_names<-c("Blind_Protection","Informed_Protection","Belief_Elicitation","Value_Elicitation")
> 
> fulldat %>% select(und_vars) %>%filter(complete.cases(.)) %>%
+   sapply(function(x) ifelse(x==9,1,0)) %>% as.matrix() %>% colSums %>% as.matrix ->nagree
Note: Using an external vector in selections is ambiguous.
i Use `all_of(und_vars)` instead of `und_vars` to silence this message.
i See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
> resp<-data.frame(task_names,nagree)
> resp$pagree<-resp$nagree/19
> 
> uplot1<-resp %>%
+   ggplot(aes(x=task_names,y=pagree, fill="blue"))+
+   geom_bar(stat='identity')+
+   scale_fill_manual(values = c("navy"))+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   labs(x="Task", y="% agree", title = "I understood the instructions:")+
+   theme(text = element_text(size=15), plot.title = element_text(size=15), legend.position = "none")+
+   coord_flip()
> print(uplot1)
> ggsave("Graphs/Uplot1.pdf")
Saving 7 x 7 in image
> 
> 
> und_vars_payoff<-c("Q112_1","Q112_2","Q112_3","Q112_4")
> fulldat %>% select(und_vars_payoff) %>%filter(complete.cases(.)) %>%
+   sapply(function(x) ifelse(x==9,1,0)) %>% as.matrix() %>% colSums %>% as.matrix ->nagree
Note: Using an external vector in selections is ambiguous.
i Use `all_of(und_vars_payoff)` instead of `und_vars_payoff` to silence this message.
i See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
> resp2<-data.frame(task_names,nagree)
> resp2$pagree<-resp2$nagree/19
> 
> 
> uplot2<-resp2 %>%
+   ggplot(aes(x=task_names,y=pagree, fill="blue"))+
+   geom_bar(stat='identity')+
+   scale_fill_manual(values = c("navy"))+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   labs(x="Task", y="% agree", title = "I understood how my choices affected the payoff in:")+
+   theme(text = element_text(size=15), plot.title = element_text(size=15), legend.position = "none")+
+   coord_flip()
> print(uplot2)
> ggsave("Graphs/Uplot2.pdf")
Saving 7 x 7 in image
> 
> 
> #Filtering only the responses with good understanding of instructions:
> fulldat$goodquiz<-(fulldat$Ncorrect>6)
> fulldat<-subset(fulldat,goodquiz==TRUE)
> 
> #merge treatment sequences:
> exp_treatments<-readRDS(file="Input/exp_treatments.Rdata") #reading the treatments
> 
> names(exp_treatments)<-c("treatN","belong","p","tot_gr","bl_gr","w_gr")
> exp_treatments<-subset(exp_treatments,select= -c(belong))
> 
> 
> treat_sequences<-read.csv(file='Input/treatment_sequences.csv')
> names(treat_sequences)<-c("sequence","r1","r2","r3","r4","r5","r6")
> 
> #treatments dataframe has a panel structure: sequence and round in two first columns
> #then a prior prob, nhonest, nwhite, nblack gremlins, then posterior white, posterior black, WTP
> 
> treat_sequences %>% gather(round, treatN, r1:r6, factor_key=TRUE) %>% 
+   mutate(round=as.numeric(substr(round,2,2))) %>% arrange(sequence, round) ->treat_sequences
> 
> treatments<-merge(treat_sequences,exp_treatments,by=c("treatN"),all.x = TRUE)
> 
> treatments %>% mutate(phintWB=(w_gr/tot_gr), phintWW=(tot_gr-bl_gr)/tot_gr) %>%
+   mutate(phintBB=1-phintWB, phintBW=1-phintWW) %>%
+   mutate(post_probW=p*phintWB/(p*phintWB+(1-p)*phintWW), post_probB=p*phintBB/(p*phintBB+(1-p)*phintBW)) -> treatments
> print(treatments)
   treatN sequence round   p tot_gr bl_gr w_gr   phintWB   phintWW   phintBB
1       1        1     1 0.1      2     0    0 0.0000000 1.0000000 1.0000000
2       1        2     1 0.1      2     0    0 0.0000000 1.0000000 1.0000000
3       1        3     1 0.1      2     0    0 0.0000000 1.0000000 1.0000000
4       2        1     2 0.1      3     1    0 0.0000000 0.6666667 1.0000000
5       3        2     2 0.1      3     0    1 0.3333333 1.0000000 0.6666667
6       4        1     3 0.1      3     1    1 0.3333333 0.6666667 0.6666667
7       5        2     3 0.1      5     1    0 0.0000000 0.8000000 1.0000000
8       6        3     2 0.1      5     0    1 0.2000000 1.0000000 0.8000000
9       7        3     3 0.1      5     1    1 0.2000000 0.8000000 0.8000000
10      8        4     1 0.2      2     0    0 0.0000000 1.0000000 1.0000000
11      8        5     1 0.2      2     0    0 0.0000000 1.0000000 1.0000000
12      8        6     1 0.2      2     0    0 0.0000000 1.0000000 1.0000000
13      9        4     2 0.2      3     1    0 0.0000000 0.6666667 1.0000000
14     10        5     2 0.2      3     0    1 0.3333333 1.0000000 0.6666667
15     11        4     3 0.2      3     1    1 0.3333333 0.6666667 0.6666667
16     12        5     3 0.2      5     1    0 0.0000000 0.8000000 1.0000000
17     13        6     2 0.2      5     0    1 0.2000000 1.0000000 0.8000000
18     14        6     3 0.2      5     1    1 0.2000000 0.8000000 0.8000000
19     15        1     4 0.3      2     0    0 0.0000000 1.0000000 1.0000000
20     15        2     4 0.3      2     0    0 0.0000000 1.0000000 1.0000000
21     15        3     4 0.3      2     0    0 0.0000000 1.0000000 1.0000000
22     16        1     5 0.3      3     1    0 0.0000000 0.6666667 1.0000000
23     17        2     5 0.3      3     0    1 0.3333333 1.0000000 0.6666667
24     18        1     6 0.3      3     1    1 0.3333333 0.6666667 0.6666667
25     19        2     6 0.3      5     1    0 0.0000000 0.8000000 1.0000000
26     20        3     5 0.3      5     0    1 0.2000000 1.0000000 0.8000000
27     21        3     6 0.3      5     1    1 0.2000000 0.8000000 0.8000000
28     22        4     4 0.5      2     0    0 0.0000000 1.0000000 1.0000000
29     22        5     4 0.5      2     0    0 0.0000000 1.0000000 1.0000000
30     22        6     4 0.5      2     0    0 0.0000000 1.0000000 1.0000000
31     23        4     5 0.5      3     1    0 0.0000000 0.6666667 1.0000000
32     24        5     5 0.5      3     0    1 0.3333333 1.0000000 0.6666667
33     25        4     6 0.5      3     1    1 0.3333333 0.6666667 0.6666667
34     26        5     6 0.5      5     1    0 0.0000000 0.8000000 1.0000000
35     27        6     5 0.5      5     0    1 0.2000000 1.0000000 0.8000000
36     28        6     6 0.5      5     1    1 0.2000000 0.8000000 0.8000000
     phintBW post_probW post_probB
1  0.0000000 0.00000000  1.0000000
2  0.0000000 0.00000000  1.0000000
3  0.0000000 0.00000000  1.0000000
4  0.3333333 0.00000000  0.2500000
5  0.0000000 0.03571429  1.0000000
6  0.3333333 0.05263158  0.1818182
7  0.2000000 0.00000000  0.3571429
8  0.0000000 0.02173913  1.0000000
9  0.2000000 0.02702703  0.3076923
10 0.0000000 0.00000000  1.0000000
11 0.0000000 0.00000000  1.0000000
12 0.0000000 0.00000000  1.0000000
13 0.3333333 0.00000000  0.4285714
14 0.0000000 0.07692308  1.0000000
15 0.3333333 0.11111111  0.3333333
16 0.2000000 0.00000000  0.5555556
17 0.0000000 0.04761905  1.0000000
18 0.2000000 0.05882353  0.5000000
19 0.0000000 0.00000000  1.0000000
20 0.0000000 0.00000000  1.0000000
21 0.0000000 0.00000000  1.0000000
22 0.3333333 0.00000000  0.5625000
23 0.0000000 0.12500000  1.0000000
24 0.3333333 0.17647059  0.4615385
25 0.2000000 0.00000000  0.6818182
26 0.0000000 0.07894737  1.0000000
27 0.2000000 0.09677419  0.6315789
28 0.0000000 0.00000000  1.0000000
29 0.0000000 0.00000000  1.0000000
30 0.0000000 0.00000000  1.0000000
31 0.3333333 0.00000000  0.7500000
32 0.0000000 0.25000000  1.0000000
33 0.3333333 0.33333333  0.6666667
34 0.2000000 0.00000000  0.8333333
35 0.0000000 0.16666667  1.0000000
36 0.2000000 0.20000000  0.8000000
> 
> 
> #Saving the text information
> fileConn<-file("Output/Feedback_pilot.txt","w")
> writeLines(c("Which task did you find the most confusing?"), fileConn)
> writeLines(paste(fulldat$Q104, collapse = "\n"), fileConn)
> writeLines(c("**************************************************\n \n"), fileConn)
> writeLines(c("Please explain the strategy you used for Task 2 (Informed Protection)? This is the task in which you see a hint and then decide to protect or not."), fileConn)
> writeLines(paste(fulldat$Q105, collapse = "\n"), fileConn)
> writeLines(c("**************************************************\n \n"), fileConn)
> writeLines(c("Please explain the strategy you used in Task 3 (Measuring Chances)? This is the task in which you use sliders."), fileConn)
> writeLines(paste(fulldat$Q106, collapse = "\n"), fileConn)
> writeLines(c("**************************************************\n \n"), fileConn)
> writeLines(c("Do you see any ways to improve the experiment?"), fileConn)
> writeLines(paste(fulldat$Q114, collapse = "\n"), fileConn)
> writeLines(c("**************************************************\n \n"), fileConn)
> writeLines(c("Anything else you would like to say about the experiment?"), fileConn)
> writeLines(paste(fulldat$Q115, collapse = "\n"), fileConn)
> close(fileConn)
> 
> 
> #Remove X as the first letter of many variable names:
> oldnames = names(fulldat)[substr(names(fulldat),1,1)=="X"]
> newnames = sapply(oldnames,function (x) substr(x,2,100000L),USE.NAMES=FALSE)
> 
> fulldat %>% rename_at(vars(oldnames), ~ newnames) -> fulldat
Note: Using an external vector in selections is ambiguous.
i Use `all_of(oldnames)` instead of `oldnames` to silence this message.
i See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
> 
> #Prepare the data on blind protection choices:
> blprotN<-c("1_B1","2_B1", "3_B1", "4_B1", "5_B1")
> #create better names for informed protection variables
> IP_W<-names(fulldat)[substr(names(fulldat),2,6)=="_IP_W"]
> IP_B<-names(fulldat)[substr(names(fulldat),2,6)=="_IP_B"]
> 
> print(fulldat[,blprotN])
   1_B1 2_B1 3_B1 4_B1 5_B1
1     0    0    1    1    1
2     0    0    1    1    1
4     0    0    1    1    1
5     0    0    0    1    1
6     1    0    1    0    0
7     1    1    1    1    1
9     0    0    1    1    1
11    0    0    1    1    1
12    0    0    0    1    1
13    0    0    1    0    0
14    0    0    1    1    1
> 
> 
> #Prepare the data on informed protection choices
> IPdata<-fulldat[,c("Participant_ID","sequence",IP_W,IP_B)]
> 
> 
> h=1
> for (s in c("W","B")) {
+   for (r in 1:nrounds) {
+     old_choicename=sprintf("%d_IP_%s",r,s)
+     print(old_choicename)
+     new_choicename=sprintf("IPchoice_%d_%d", h,r)
+     names(IPdata)[names(IPdata) == old_choicename] <-sprintf("IP_%d_%d", h,r)
+   
+   }
+   h=h+1
+   
+ }
[1] "1_IP_W"
[1] "2_IP_W"
[1] "3_IP_W"
[1] "4_IP_W"
[1] "5_IP_W"
[1] "6_IP_W"
[1] "1_IP_B"
[1] "2_IP_B"
[1] "3_IP_B"
[1] "4_IP_B"
[1] "5_IP_B"
[1] "6_IP_B"
> print(names(IPdata))
 [1] "Participant_ID" "sequence"       "IP_1_1"         "IP_1_2"        
 [5] "IP_1_3"         "IP_1_4"         "IP_1_5"         "IP_1_6"        
 [9] "IP_2_1"         "IP_2_2"         "IP_2_3"         "IP_2_4"        
[13] "IP_2_5"         "IP_2_6"        
> print(lapply(IPdata,class))
$Participant_ID
[1] "numeric"

$sequence
[1] "numeric"

$IP_1_1
[1] "numeric"

$IP_1_2
[1] "numeric"

$IP_1_3
[1] "numeric"

$IP_1_4
[1] "numeric"

$IP_1_5
[1] "numeric"

$IP_1_6
[1] "numeric"

$IP_2_1
[1] "numeric"

$IP_2_2
[1] "numeric"

$IP_2_3
[1] "numeric"

$IP_2_4
[1] "numeric"

$IP_2_5
[1] "numeric"

$IP_2_6
[1] "numeric"

> 
> 
> 
> IPdata<-IPdata[complete.cases(IPdata),]
> IPdata %>% 
+   pivot_longer(
+     cols=IP_1_1:IP_2_6,
+     names_to = c(".value","Signal","round"),
+     names_pattern="(IP)_(.)_(.)",
+     values_drop_na = TRUE)->IPtransf
> 
> IPtransf<-merge(IPtransf,treatments,by=c("sequence","round"),all.x=TRUE)
> IPtransf%>%mutate(post_prob=post_probW*(2-as.numeric(Signal))+post_probB*(as.numeric(Signal)-1)) -> IPtransf
> 
> 
> 
> 
> #Preparing reported beliefs data:
> belief_repn<-names(fulldat)[substr(names(fulldat),2,6)=="_BE1_"] #select variable names
> 
> belief_dat<-fulldat[,c("Participant_ID","sequence",belief_repn)] #select the data
> 
> #reformatting variable names to BE_(hint color)_(round)
> h=1
> for (s in c("W","B")) {
+   for (r in 1:nrounds) {
+     new_choicename=sprintf("IPchoice_%d_%d", h,r)
+     names(belief_dat)[names(belief_dat) == sprintf("%d_BE1_%s_1",r,s)] <-sprintf("BE_%d_%d", h,r)
+     names(belief_dat)[names(belief_dat) == sprintf("%d_BE1_%s_15",r,s)] <-sprintf("BE_%d_%d", h,r)
+   }
+   h=h+1
+ }
> belief_dat<-belief_dat[complete.cases(belief_dat),]
> 
> #reshaping to a long format (panel with sequence, round in columns)
> belief_dat %>% 
+   pivot_longer(
+     cols=BE_1_1:BE_2_6,
+     names_to = c(".value","Signal","round"),
+     names_pattern="(BE)_(.)_(.)",
+     values_drop_na = TRUE)->belief_dat
> 
> belief_dat<-merge(belief_dat,treatments,by=c("sequence","round"),all.x=TRUE) #merging round characteristics
> belief_dat%>%mutate(post_prob=post_probW*(2-as.numeric(Signal))+post_probB*(as.numeric(Signal)-1), belief=0.01*BE) -> belief_dat #calculate posterior prob
> print(belief_dat)
   sequence round Participant_ID Signal  BE treatN   p tot_gr bl_gr w_gr
1         1     1              1      1   0      1 0.1      2     0    0
2         1     1              1      2 100      1 0.1      2     0    0
3         1     2              1      1   0      2 0.1      3     1    0
4         1     2              1      2  67      2 0.1      3     1    0
5         1     3              1      1  33      4 0.1      3     1    1
6         1     3              1      2  33      4 0.1      3     1    1
7         1     4              1      1   0     15 0.3      2     0    0
8         1     4              1      2 100     15 0.3      2     0    0
9         1     5              1      1   0     16 0.3      3     1    0
10        1     5              1      2  66     16 0.3      3     1    0
11        1     6              1      1  33     18 0.3      3     1    1
12        1     6              1      2  33     18 0.3      3     1    1
13        3     1              3      1   0      1 0.1      2     0    0
14        3     1              3      2 100      1 0.1      2     0    0
15        3     2              3      1  98      6 0.1      5     0    1
16        3     2              3      2 100      6 0.1      5     0    1
17        3     3              3      1   2      7 0.1      5     1    1
18        3     3              3      2  80      7 0.1      5     1    1
19        3     4              3      1   0     15 0.3      2     0    0
20        3     4              3      2 100     15 0.3      2     0    0
21        3     5              3      1   6     20 0.3      5     0    1
22        3     5              3      2 100     20 0.3      5     0    1
23        3     6              3      1  15     21 0.3      5     1    1
24        3     6              3      2  70     21 0.3      5     1    1
25        4     1              4      1   0      8 0.2      2     0    0
26        4     1              4      2 100      8 0.2      2     0    0
27        4     2              4      1   0      9 0.2      3     1    0
28        4     2              4      2  53      9 0.2      3     1    0
29        4     3              4      1  20     11 0.2      3     1    1
30        4     3              4      2  20     11 0.2      3     1    1
31        4     4              4      1   0     22 0.5      2     0    0
32        4     4              4      2 100     22 0.5      2     0    0
33        4     5              4      1   0     23 0.5      3     1    0
34        4     5              4      2  15     23 0.5      3     1    0
35        4     6              4      1  50     25 0.5      3     1    1
36        4     6              4      2  50     25 0.5      3     1    1
     phintWB   phintWW   phintBB   phintBW post_probW post_probB  post_prob
1  0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 0.00000000
2  0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 1.00000000
3  0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.2500000 0.00000000
4  0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.2500000 0.25000000
5  0.3333333 0.6666667 0.6666667 0.3333333 0.05263158  0.1818182 0.05263158
6  0.3333333 0.6666667 0.6666667 0.3333333 0.05263158  0.1818182 0.18181818
7  0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 0.00000000
8  0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 1.00000000
9  0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.5625000 0.00000000
10 0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.5625000 0.56250000
11 0.3333333 0.6666667 0.6666667 0.3333333 0.17647059  0.4615385 0.17647059
12 0.3333333 0.6666667 0.6666667 0.3333333 0.17647059  0.4615385 0.46153846
13 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 0.00000000
14 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 1.00000000
15 0.2000000 1.0000000 0.8000000 0.0000000 0.02173913  1.0000000 0.02173913
16 0.2000000 1.0000000 0.8000000 0.0000000 0.02173913  1.0000000 1.00000000
17 0.2000000 0.8000000 0.8000000 0.2000000 0.02702703  0.3076923 0.02702703
18 0.2000000 0.8000000 0.8000000 0.2000000 0.02702703  0.3076923 0.30769231
19 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 0.00000000
20 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 1.00000000
21 0.2000000 1.0000000 0.8000000 0.0000000 0.07894737  1.0000000 0.07894737
22 0.2000000 1.0000000 0.8000000 0.0000000 0.07894737  1.0000000 1.00000000
23 0.2000000 0.8000000 0.8000000 0.2000000 0.09677419  0.6315789 0.09677419
24 0.2000000 0.8000000 0.8000000 0.2000000 0.09677419  0.6315789 0.63157895
25 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 0.00000000
26 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 1.00000000
27 0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.4285714 0.00000000
28 0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.4285714 0.42857143
29 0.3333333 0.6666667 0.6666667 0.3333333 0.11111111  0.3333333 0.11111111
30 0.3333333 0.6666667 0.6666667 0.3333333 0.11111111  0.3333333 0.33333333
31 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 0.00000000
32 0.0000000 1.0000000 1.0000000 0.0000000 0.00000000  1.0000000 1.00000000
33 0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.7500000 0.00000000
34 0.0000000 0.6666667 1.0000000 0.3333333 0.00000000  0.7500000 0.75000000
35 0.3333333 0.6666667 0.6666667 0.3333333 0.33333333  0.6666667 0.33333333
36 0.3333333 0.6666667 0.6666667 0.3333333 0.33333333  0.6666667 0.66666667
   belief
1    0.00
2    1.00
3    0.00
4    0.67
5    0.33
6    0.33
7    0.00
8    1.00
9    0.00
10   0.66
11   0.33
12   0.33
13   0.00
14   1.00
15   0.98
16   1.00
17   0.02
18   0.80
19   0.00
20   1.00
21   0.06
22   1.00
23   0.15
24   0.70
25   0.00
26   1.00
27   0.00
28   0.53
29   0.20
30   0.20
31   0.00
32   1.00
33   0.00
34   0.15
35   0.50
36   0.50
> 
> 
> #Preparing WTP data
> WTPmatrix<-matrix(0, nrow=dim(fulldat)[1], ncol = nrounds)
> 
> for (r in 1:6){
+   
+   WTPnames<-names(fulldat)[substr(names(fulldat),1,6)==sprintf("%d_WTP1",r)] 
+   print(WTPnames)
+   fulldat %>% select(WTPnames) %>% sapply(function(x) ifelse(is.na(x),0,x)) %>% as.matrix %>% rowSums->WTP
+   WTPmatrix[,r]<-0.5*(WTP-1)
+   
+ }
 [1] "1_WTP1_1_1"  "1_WTP1_2_1"  "1_WTP1_3_1"  "1_WTP1_4_1"  "1_WTP1_5_1" 
 [6] "1_WTP1_6_1"  "1_WTP1_7_1"  "1_WTP1_8_1"  "1_WTP1_9_1"  "1_WTP1_10_1"
[11] "1_WTP1_11_1"
Note: Using an external vector in selections is ambiguous.
i Use `all_of(WTPnames)` instead of `WTPnames` to silence this message.
i See <https://tidyselect.r-lib.org/reference/faq-external-vector.html>.
This message is displayed once per session.
 [1] "2_WTP1_1_1"  "2_WTP1_2_1"  "2_WTP1_3_1"  "2_WTP1_4_1"  "2_WTP1_5_1" 
 [6] "2_WTP1_6_1"  "2_WTP1_7_1"  "2_WTP1_8_1"  "2_WTP1_9_1"  "2_WTP1_10_1"
[11] "2_WTP1_11_1"
 [1] "3_WTP1_1_1"  "3_WTP1_2_1"  "3_WTP1_3_1"  "3_WTP1_4_1"  "3_WTP1_5_1" 
 [6] "3_WTP1_6_1"  "3_WTP1_7_1"  "3_WTP1_8_1"  "3_WTP1_9_1"  "3_WTP1_10_1"
[11] "3_WTP1_11_1"
 [1] "4_WTP1_1_1"  "4_WTP1_2_1"  "4_WTP1_3_1"  "4_WTP1_4_1"  "4_WTP1_5_1" 
 [6] "4_WTP1_6_1"  "4_WTP1_7_1"  "4_WTP1_8_1"  "4_WTP1_9_1"  "4_WTP1_10_1"
[11] "4_WTP1_11_1"
 [1] "5_WTP1_1_1"  "5_WTP1_2_1"  "5_WTP1_3_1"  "5_WTP1_4_1"  "5_WTP1_5_1" 
 [6] "5_WTP1_6_1"  "5_WTP1_7_1"  "5_WTP1_8_1"  "5_WTP1_9_1"  "5_WTP1_10_1"
[11] "5_WTP1_11_1"
 [1] "6_WTP1_1_1"  "6_WTP1_2_1"  "6_WTP1_3_1"  "6_WTP1_4_1"  "6_WTP1_5_1" 
 [6] "6_WTP1_6_1"  "6_WTP1_7_1"  "6_WTP1_8_1"  "6_WTP1_9_1"  "6_WTP1_10_1"
[11] "6_WTP1_11_1"
> print(WTPmatrix)
      [,1] [,2] [,3] [,4] [,5] [,6]
 [1,]  1.0  0.5    0  1.0  0.5  0.0
 [2,]  0.5  0.0    0  3.0  2.5  0.5
 [3,]  4.0  1.0    0  5.0  1.5  0.0
 [4,]  5.0  3.0    3  5.0  3.0  2.5
 [5,]  3.0  2.0    4  5.0  2.0  3.0
 [6,]  2.5  0.0    0  2.5  0.0  0.0
 [7,]  0.5  2.0    2  0.5  2.0  3.0
 [8,]  4.5  3.0    0  5.0  3.5  0.0
 [9,]  5.0  1.5    0  5.0  0.0  0.0
[10,]  5.0  4.0    2  5.0  3.0  0.5
[11,]  3.0  2.5    1  3.0  2.0  0.5
> WTPdat<-data.frame(fulldat$Participant_ID, fulldat$sequence,WTPmatrix)
> names(WTPdat)<-c("Participant_ID","sequence","r_1","r_2","r_3","r_4","r_5","r_6")
> 
> WTPdat %>% filter(complete.cases(.)) %>% pivot_longer(
+   cols=r_1:r_6,
+   names_to = c(".value","round"),
+   names_pattern="(r)_(.)",
+   values_drop_na = TRUE) ->WTPdat
> names(WTPdat)<-c("Participant_ID","sequence","round","WTP")
> 
> WTPdat<-merge(WTPdat,treatments,by=c("sequence","round"),all.x=TRUE)
> 
> #Calculating the signal's value for a risk-neutral agent
> Loss=20
> cost=5
> 
> WTPdat %>% mutate(Value=-(p*phintWB*Loss-(p*phintBB+(1-p)*phintBW)*cost))->WTPdat
> print(table(WTPdat$Value))

-0.833333333333333                  0  0.166666666666667                0.5 
                 1                  2                  1                  2 
 0.666666666666667                0.7                0.9                  1 
                 1                  1                  1                  1 
  1.16666666666667                1.5                  2   2.33333333333333 
                 1                  2                  1                  1 
               2.5   2.66666666666667   3.33333333333333 
                 1                  1                  1 
> 
> 
> 
> #Protection choices based on probability (boxplot):
> BlChoiceNames<-names(fulldat)[endsWith(names(fulldat), '_B1')]
> 
> fulldat[,BlChoiceNames] %>%  pivot_longer(
+   cols='1_B1':'5_B1',
+   names_to = c("round",".value"),
+   names_sep = "_",
+   #names_pattern="(IPchoice|IPhint)_(.)_(.)",
+   values_drop_na = TRUE)->Blind_Dat
> 
> Blind_Dat$p<-0.1*as.numeric(Blind_Dat$round)
> 
> #aggregate to calculate trials and successes
> Blind_Dat %>% group_by(p) %>% dplyr::summarize(average = mean(B1), totprotect=sum(B1), n = n()) ->props
`summarise()` ungrouping output (override with `.groups` argument)
> 
> #calculate confidence intervals
> props_CI<-mapply(function(x,y) prop.test(x,y, alternative = "two.sided", conf.level = 0.95)$conf.int, props$totprotect,props$n)
> vnames<-names(props)
> 
> 
> props<-bind_cols(props,as.data.frame(t(props_CI)))#add confidence bounds back
> names(props)<-c(vnames,"L_bound","U_bound")
> 
> props$Prob_black<-factor(props$p,levels = c(0.1,0.2,0.3,0.4,0.5),labels = c("0.1","0.2","0.3","0.4","0.5"),ordered=TRUE)
> #making the graph
> 
> BL_plot<-props %>%
+   ggplot(aes(x=Prob_black,y=average, fill="blue"))+
+   geom_crossbar(aes(ymin=L_bound,ymax=U_bound),width=0.5)+
+   scale_fill_manual(values = c("grey"))+
+   labs(x="Probability of Black Ball", y="% protecting", title = "Blind Protection vs Probability")+
+   theme(legend.position = "none")+
+   theme(text = element_text(size=18))+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)
> print(BL_plot) 
> ggsave("Graphs/BLProt_plot2.pdf")
Saving 7 x 7 in image
> 
> 
> 
> 
> #Understanding of the gremlins:
> fulldat$Q117<-factor(fulldat$Q117,levels = c(1,2,3,4),labels = c("The Ball is white","The Ball is black", "We don't know", "This is impossible"),ordered=TRUE)
> fulldat$Q118<-factor(fulldat$Q118,levels = c(1,2,3,4),labels = c("The Ball is white","The Ball is black", "We don't know", "This is impossible"),ordered=TRUE)
> 
> GRdat<-data.frame(fulldat[,c("Q117","Q118")])
> GRdat<-GRdat[complete.cases(GRdat),]
> GRplot1<-GRdat %>%
+   ggplot()+
+   geom_bar(mapping = aes(x = Q117, y=..prop..,group=1,fill="blue"), stat="count", na.rm=TRUE)+
+   scale_fill_manual(values = c("navy"))+
+   coord_flip()+
+   labs(x="", y="% mentioned", title = "If a black-swamp gremlin says\n that the ball is white__")+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   theme(text = element_text(size=15), plot.title = element_text(size=15), legend.position = "none")+
+   scale_x_discrete(limits = rev(levels(fulldat$Q117)))
> print(GRplot1)
> 
> GRplot2<-GRdat %>%
+   ggplot()+
+   geom_bar(mapping = aes(x = Q118, y=..prop..,group=1,fill="blue"), stat="count", na.rm=TRUE)+
+   scale_fill_manual(values = c("navy"))+
+   coord_flip()+
+   labs(x="", y="% mentioned", title = "If a white-swamp gremlin says\n that the ball is white__")+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   theme(text = element_text(size=15), plot.title = element_text(size=15), legend.position = "none")+
+   scale_x_discrete(limits = rev(levels(fulldat$Q117)))
> print(GRplot2)
> library(ggpubr)
> fig_response_sd <- ggarrange(GRplot1,GRplot2,widths=c(2,2), common.legend = TRUE,legend="none")+
+   theme(legend.title=element_blank()) 
> print(fig_response_sd)
> ggsave("Graphs/GR_responses2.pdf",width = 10, height = 6)
> #Q117, Q118
> 
> 
> 
> #Protection choices based on the signal received #calculate average protection rate based on the posterior
> IPtransf %>% group_by(post_prob) %>% dplyr::summarize(average = mean(IP), totprotect=sum(IP), n = n()) ->IPprops
`summarise()` ungrouping output (override with `.groups` argument)
> 
> IP_plot<-IPprops %>% ggplot(aes(post_prob,average),color = "#1F3552")+
+   geom_line(color = "#1F3552",size=2)+
+   geom_point(color = "#1F3552",size=4)+
+   labs(x="Posterior probability", y="% protecting", title = "Protection response to signals/hints")+
+   geom_vline(xintercept=0.25, linetype="dashed", color = "darkgray", size=1)+
+   theme(text = element_text(size=18))+
+   annotate("text", x = 0.32, y = 0.05, label = "Cost/loss ratio")
> print(IP_plot)
> ggsave("Graphs/IP_plot.pdf")
Saving 7 x 7 in image
> 
> 
> 
> 
> 
> 
> #Scatter plot reported beliefs vs posteriors
> UPD_curve<-ggplot(belief_dat, aes(x=post_prob, y=belief)) + geom_point(colour = 'dodgerblue4',fill="dodgerblue4", size=3, shape=21)+
+   labs(x="Posterior Probability",y="Reported Belief", title = "Bayesian Updating")+
+   scale_x_continuous(limits=c(0,1),labels = scales::percent)+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   theme(text = element_text(size=18))+
+   geom_jitter(width = 0.1, height = 0.1, colour='dodgerblue4')
>   #geom_text(hjust=0.3,vjust=-0.7,size=5)
> 
> print(UPD_curve)
Warning message:
Removed 16 rows containing missing values (geom_point). 
> ggsave("Graphs/UPD_curve2.pdf")
Saving 7 x 7 in image
Warning message:
Removed 16 rows containing missing values (geom_point). 
> 
> 
> 
> #Scatter plot: WTP vs signal value
> WTP_curve2<-ggplot(WTPdat, aes(x=Value, y=WTP)) + geom_jitter(width=.05, colour = 'dodgerblue4',fill="dodgerblue4", size=3, shape=21)+
+   labs(x="Value",y="Willingness-to-pay (USD)", title = "WTP for a signal vs predicted value")+
+   scale_x_continuous(limits=c(-0.5,5))+
+   scale_y_continuous(limits=c(-0.5,5))+
+   theme(text = element_text(size=18))
> #geom_text(hjust=0.3,vjust=-0.7,size=5)
> 
> print(WTP_curve2)
Warning message:
Removed 1 rows containing missing values (geom_point). 
> ggsave("Graphs/WTP_curve2.pdf")
Saving 7 x 7 in image
Warning message:
Removed 1 rows containing missing values (geom_point). 
> 
> 
> proc.time()
   user  system elapsed 
   4.60    0.39    5.06 
