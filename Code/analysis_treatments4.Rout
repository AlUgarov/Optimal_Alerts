
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #R analysis of the experimental data
> 
> # Install Wes Anderson palettes
> #install.packages("wesanderson")
> # Load
> 
> 
> remove(list = ls())
> library(dplyr)

Attaching package: 'dplyr'

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(tidyr)
> library(ggplot2)
> library(magrittr)

Attaching package: 'magrittr'

The following object is masked from 'package:tidyr':

    extract

> library(wesanderson)
Warning message:
package 'wesanderson' was built under R version 4.0.5 
> 
> tempdir()
[1] "C:\\Users\\aluga\\AppData\\Local\\Temp\\RtmpqQhWtD"
> dir.create(tempdir())
Warning message:
In dir.create(tempdir()) :
  'C:\Users\aluga\AppData\Local\Temp\RtmpqQhWtD' already exists
> setwd("C:/Tornado_warnings/Experiment/Alerts_Experiment")
> 
> #Signal descriptions:
> totgremlins<-c(2,3,3,3,5,5,5)
> blsw_gremlins<-c(0,1,0,1,1,0,1)
> wsw_gremlins<-c(0,0,1,1,0,1,1)
> 
> #Probabilities of black balls
> treatm_probs<-c(0.1,0.2,0.3,0.5)
> 
> 
> nsignals=length(totgremlins)
> nprobs=length(treatm_probs)
> 
> 
> ntreatments=nsignals*nprobs
> snames=sapply(c(1:ntreatments),as.character)
> 
> exp_treatments<-data.frame(snames=as.numeric(snames), belong=rep(1,each=ntreatments), p=rep(treatm_probs,each=nsignals), tot_gr=rep(totgremlins,times=nprobs), bl_gr=rep(blsw_gremlins,times=nprobs), w_gr=rep(wsw_gremlins,times=nprobs))
> 
> print(exp_treatments)
   snames belong   p tot_gr bl_gr w_gr
1       1      1 0.1      2     0    0
2       2      1 0.1      3     1    0
3       3      1 0.1      3     0    1
4       4      1 0.1      3     1    1
5       5      1 0.1      5     1    0
6       6      1 0.1      5     0    1
7       7      1 0.1      5     1    1
8       8      1 0.2      2     0    0
9       9      1 0.2      3     1    0
10     10      1 0.2      3     0    1
11     11      1 0.2      3     1    1
12     12      1 0.2      5     1    0
13     13      1 0.2      5     0    1
14     14      1 0.2      5     1    1
15     15      1 0.3      2     0    0
16     16      1 0.3      3     1    0
17     17      1 0.3      3     0    1
18     18      1 0.3      3     1    1
19     19      1 0.3      5     1    0
20     20      1 0.3      5     0    1
21     21      1 0.3      5     1    1
22     22      1 0.5      2     0    0
23     23      1 0.5      3     1    0
24     24      1 0.5      3     0    1
25     25      1 0.5      3     1    1
26     26      1 0.5      5     1    0
27     27      1 0.5      5     0    1
28     28      1 0.5      5     1    1
> 
> #Save to import into the data analysis:
> saveRDS(exp_treatments, file = "Input/exp_treatments.Rdata")
> write.csv(exp_treatments,'Input/exp_treatments_pilot.csv')
> 
> exp_treatments$snames<-rep('',each=ntreatments)
> exp_treatments %<>% mutate(tpr=(tot_gr-w_gr)/tot_gr,fpr=bl_gr/tot_gr, ppv=p*(tot_gr-w_gr)/(p*(tot_gr-w_gr)+(1-p)*bl_gr))
> #exp_treatments %<>% mutate(ppv=(1-p)*fpr/(p*tpr+(1-p)*fpr), fdr=(1-p)*fpr/(p*tpr+(1-p)*fpr))
> print(exp_treatments)
   snames belong   p tot_gr bl_gr w_gr       tpr       fpr       ppv
1              1 0.1      2     0    0 1.0000000 0.0000000 1.0000000
2              1 0.1      3     1    0 1.0000000 0.3333333 0.2500000
3              1 0.1      3     0    1 0.6666667 0.0000000 1.0000000
4              1 0.1      3     1    1 0.6666667 0.3333333 0.1818182
5              1 0.1      5     1    0 1.0000000 0.2000000 0.3571429
6              1 0.1      5     0    1 0.8000000 0.0000000 1.0000000
7              1 0.1      5     1    1 0.8000000 0.2000000 0.3076923
8              1 0.2      2     0    0 1.0000000 0.0000000 1.0000000
9              1 0.2      3     1    0 1.0000000 0.3333333 0.4285714
10             1 0.2      3     0    1 0.6666667 0.0000000 1.0000000
11             1 0.2      3     1    1 0.6666667 0.3333333 0.3333333
12             1 0.2      5     1    0 1.0000000 0.2000000 0.5555556
13             1 0.2      5     0    1 0.8000000 0.0000000 1.0000000
14             1 0.2      5     1    1 0.8000000 0.2000000 0.5000000
15             1 0.3      2     0    0 1.0000000 0.0000000 1.0000000
16             1 0.3      3     1    0 1.0000000 0.3333333 0.5625000
17             1 0.3      3     0    1 0.6666667 0.0000000 1.0000000
18             1 0.3      3     1    1 0.6666667 0.3333333 0.4615385
19             1 0.3      5     1    0 1.0000000 0.2000000 0.6818182
20             1 0.3      5     0    1 0.8000000 0.0000000 1.0000000
21             1 0.3      5     1    1 0.8000000 0.2000000 0.6315789
22             1 0.5      2     0    0 1.0000000 0.0000000 1.0000000
23             1 0.5      3     1    0 1.0000000 0.3333333 0.7500000
24             1 0.5      3     0    1 0.6666667 0.0000000 1.0000000
25             1 0.5      3     1    1 0.6666667 0.3333333 0.6666667
26             1 0.5      5     1    0 1.0000000 0.2000000 0.8333333
27             1 0.5      5     0    1 0.8000000 0.0000000 1.0000000
28             1 0.5      5     1    1 0.8000000 0.2000000 0.8000000
> 
> real_signals<-data.frame(snames=c("COVID PCR","Tornado Warning", "Screening Mammography"), belong=rep(0,each=3), p=c(0.05,0.1,0.0086),  tpr=c(0.7, 0.7, 0.92), fpr=c(0.02, 0.25, 0.17))
> 
> print(real_signals)
                 snames belong      p  tpr  fpr
1             COVID PCR      0 0.0500 0.70 0.02
2       Tornado Warning      0 0.1000 0.70 0.25
3 Screening Mammography      0 0.0086 0.92 0.17
> 
> signals<-rbind(exp_treatments[,c("snames","belong","p","tpr","fpr")],real_signals)
> signals %<>% mutate(ppv=(1-p)*fpr/(p*tpr+(1-p)*fpr), fdr=(1-p)*fpr/(p*tpr+(1-p)*fpr))
> 
> print(signals)
                  snames belong      p       tpr       fpr       ppv       fdr
1                             1 0.1000 1.0000000 0.0000000 0.0000000 0.0000000
2                             1 0.1000 1.0000000 0.3333333 0.7500000 0.7500000
3                             1 0.1000 0.6666667 0.0000000 0.0000000 0.0000000
4                             1 0.1000 0.6666667 0.3333333 0.8181818 0.8181818
5                             1 0.1000 1.0000000 0.2000000 0.6428571 0.6428571
6                             1 0.1000 0.8000000 0.0000000 0.0000000 0.0000000
7                             1 0.1000 0.8000000 0.2000000 0.6923077 0.6923077
8                             1 0.2000 1.0000000 0.0000000 0.0000000 0.0000000
9                             1 0.2000 1.0000000 0.3333333 0.5714286 0.5714286
10                            1 0.2000 0.6666667 0.0000000 0.0000000 0.0000000
11                            1 0.2000 0.6666667 0.3333333 0.6666667 0.6666667
12                            1 0.2000 1.0000000 0.2000000 0.4444444 0.4444444
13                            1 0.2000 0.8000000 0.0000000 0.0000000 0.0000000
14                            1 0.2000 0.8000000 0.2000000 0.5000000 0.5000000
15                            1 0.3000 1.0000000 0.0000000 0.0000000 0.0000000
16                            1 0.3000 1.0000000 0.3333333 0.4375000 0.4375000
17                            1 0.3000 0.6666667 0.0000000 0.0000000 0.0000000
18                            1 0.3000 0.6666667 0.3333333 0.5384615 0.5384615
19                            1 0.3000 1.0000000 0.2000000 0.3181818 0.3181818
20                            1 0.3000 0.8000000 0.0000000 0.0000000 0.0000000
21                            1 0.3000 0.8000000 0.2000000 0.3684211 0.3684211
22                            1 0.5000 1.0000000 0.0000000 0.0000000 0.0000000
23                            1 0.5000 1.0000000 0.3333333 0.2500000 0.2500000
24                            1 0.5000 0.6666667 0.0000000 0.0000000 0.0000000
25                            1 0.5000 0.6666667 0.3333333 0.3333333 0.3333333
26                            1 0.5000 1.0000000 0.2000000 0.1666667 0.1666667
27                            1 0.5000 0.8000000 0.0000000 0.0000000 0.0000000
28                            1 0.5000 0.8000000 0.2000000 0.2000000 0.2000000
29             COVID PCR      0 0.0500 0.7000000 0.0200000 0.3518519 0.3518519
30       Tornado Warning      0 0.1000 0.7000000 0.2500000 0.7627119 0.7627119
31 Screening Mammography      0 0.0086 0.9200000 0.1700000 0.9551601 0.9551601
> 
> #signals %>% filter(snames%in% c("I","II","III","IV","COVID PCR","Tornado Warning")) %>%
> #  mutate(snames=recode(snames,"I"="I/V","II"="II/VI","III"="III/VII","IV"="IV/VIII"))->signals2
> 
> #Graph of treatments (ROC curve)
> ROC_curve<-ggplot(signals, aes(x=fpr, y=tpr, label=snames, fill=factor(belong))) + geom_point(size=3, shape=21)+
+   labs(x="False positive rate",y="True positive rate", title = "Experiment Treatments vs Other Signals: ROC")+
+   scale_x_continuous(limits=c(0,0.55),labels = scales::percent)+
+   scale_y_continuous(limits=c(0.5,1.05),labels = scales::percent)+
+   #scale_color_manual(values=c("#E69F00", "#56B4E9"))+
+   scale_fill_manual(values=wes_palette(n=2, name="Royal1"))+
+   theme(text = element_text(size=18), legend.position = "none")+
+   geom_text(hjust=-0.1,vjust=0.9,size=5)
> 
> print(ROC_curve)
> ggsave("Graphs/ROC_curve2.png")
Saving 7 x 7 in image
> 
> 
> #Graph of treatments (detection error tradeoff)
> PR_curve<-ggplot(signals, aes(x=tpr, y=ppv, label=snames, fill=factor(belong))) + geom_point(size=3, shape=21)+
+   labs(x="True Positive Rate (Recall)",y="Precision (PPV)", title = "Experiment Treatments vs Other Signals (recall-precision)")+
+   scale_x_continuous(limits=c(0.6,1.05),labels = scales::percent)+
+   scale_y_continuous(limits=c(0,1.05),labels = scales::percent)+
+   scale_fill_manual(values=wes_palette(n=2, name="Royal1"))+
+   theme(text = element_text(size=18), legend.position = "none")+
+   geom_text(hjust=0.3,vjust=-0.7,size=5)
> 
> print(PR_curve)
> ggsave("Graphs/PR_curve2.pdf")
Saving 7 x 7 in image
> 
> 
> 
> signals$fnr<-1-signals$tpr
> 
> signals %>% filter(snames%in% c("I","II","III","IV","VI","VIII","COVID PCR","Tornado Warning")) %>%
+   mutate(snames=recode(snames,"I"="I/V","III"="III/VII"))->signals2
> 
> #Graph of treatments (false alarm rate vs false negative rate)
> FAR_curve<-ggplot(signals, aes(x=fnr, y=fdr, label=snames, fill=factor(belong))) + geom_point(size=3, shape=21)+
+   labs(x="False Negative Rate=Miss Rate",y="False Alarm Rate", title = "Treatments vs Other Signals: Performance Diagram")+
+   scale_x_continuous(limits=c(0,0.5),labels = scales::percent)+
+   scale_y_continuous(limits=c(0,1),labels = scales::percent)+
+   scale_fill_manual(values=wes_palette(n=2, name="Royal1"))+
+   theme(text = element_text(size=18), legend.position = "none")+
+   geom_text(hjust=0.3,vjust=-0.7,size=5)
> 
> print(FAR_curve)
> ggsave("Graphs/FAR_curve2.pdf")
Saving 7 x 7 in image
> 
> proc.time()
   user  system elapsed 
   1.70    0.25    1.93 
